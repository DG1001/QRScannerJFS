name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Using a recent LTS version

      - name: Increment build number and create .env file
        run: |
          # Get current build number from GitHub variable (default to 0 if not set)
          CURRENT_BUILD="${{ vars.BUILD_NUMBER || '0' }}"
          echo "Current build number: $CURRENT_BUILD"
          
          # Increment build number
          NEW_BUILD=$((CURRENT_BUILD + 1))
          
          # Create version string (keeping major.minor from package.json)
          BASE_VERSION=$(node -p "require('./package.json').version.split('.').slice(0,2).join('.')")
          NEW_VERSION="$BASE_VERSION.$NEW_BUILD"
          
          echo "New version: $NEW_VERSION (build $NEW_BUILD)"
          
          # Update the GitHub variable for next run
          gh variable set BUILD_NUMBER --body "$NEW_BUILD"
          
          # Create .env file with all required variables
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
          echo "VITE_TOKEN=${{ secrets.VITE_TOKEN }}" >> .env
          echo "VITE_PIN_CODE=${{ secrets.VITE_PIN_CODE }}" >> .env
          echo "VITE_APP_VERSION=$NEW_VERSION" >> .env
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: npm install

      - name: Verify .env file
        run: |
          echo "Listing files..."
          ls -la
          echo "Verifying .env content..."
          cat .env

      - name: Build application
        run: npm run build

      - name: Add no-cache files
        run: |
          echo "" > ./dist/.nojekyll
          echo "Cache-Control: no-cache, no-store, must-revalidate" > ./dist/_headers

      - name: Check for unprocessed env variables in build output
        run: |
          echo "Searching for VITE_API_URL string in dist folder..."
          if grep -r "VITE_API_URL" ./dist; then
            echo "Error: VITE_API_URL string found in build output. Vite did not replace the environment variable."
            exit 1
          else
            echo "Success: VITE_API_URL string not found. Environment variable was likely replaced correctly."
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
