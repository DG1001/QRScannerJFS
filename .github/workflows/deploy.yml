name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      should-skip: ${{ steps.check.outputs.should-skip }}
    steps:
      - name: Check commit message
        id: check
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MSG" == *"automate version increment"* ]] || [[ "$COMMIT_MSG" == *"[skip ci]"* ]] || [[ "$COMMIT_MSG" == *"[ci skip]"* ]]; then
            echo "should-skip=true" >> $GITHUB_OUTPUT
            echo "Skipping workflow - this is a version increment or skip ci commit"
          else
            echo "should-skip=false" >> $GITHUB_OUTPUT
            echo "Proceeding with workflow"
          fi

  build-and-deploy:
    needs: check-commit
    if: needs.check-commit.outputs.should-skip != 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Using a recent LTS version

      - name: Increment version and create .env file
        run: |
          # Get current version and increment patch number
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into parts and increment patch
          IFS='.' read -ra PARTS <<< "$CURRENT_VERSION"
          MAJOR=${PARTS[0]}
          MINOR=${PARTS[1]}
          PATCH=${PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "New version: $NEW_VERSION"
          
          # Update package.json with new version
          npm version $NEW_VERSION --no-git-tag-version
          
          # Create .env file with version
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
          echo "VITE_TOKEN=${{ secrets.VITE_TOKEN }}" >> .env
          echo "VITE_PIN_CODE=${{ secrets.VITE_PIN_CODE }}" >> .env
          echo "VITE_APP_VERSION=$NEW_VERSION" >> .env

      - name: Commit version increment
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add and commit the updated package.json
          git add package.json
          git commit -m "feat(ci): automate version increment to $(node -p "require('./package.json').version") [skip ci]"
          
          # Push the changes back to the repository
          git push

      - name: Install dependencies
        run: npm install

      - name: Verify .env file
        run: |
          echo "Listing files..."
          ls -la
          echo "Verifying .env content..."
          cat .env

      - name: Build application
        run: npm run build

      - name: Add no-cache files
        run: |
          echo "" > ./dist/.nojekyll
          echo "Cache-Control: no-cache, no-store, must-revalidate" > ./dist/_headers

      - name: Check for unprocessed env variables in build output
        run: |
          echo "Searching for VITE_API_URL string in dist folder..."
          if grep -r "VITE_API_URL" ./dist; then
            echo "Error: VITE_API_URL string found in build output. Vite did not replace the environment variable."
            exit 1
          else
            echo "Success: VITE_API_URL string not found. Environment variable was likely replaced correctly."
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
